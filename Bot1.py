import telebot
import soundfile as sf
import numpy as np
import os
import logging
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot("7897457139:AAFwnUYxO_fxneeHn9ooCiVk4b1znmXu_aU")

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
TEMP_DIR = "temp_audio"
os.makedirs(TEMP_DIR, exist_ok=True)

def save_audio(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    try:
        file_info = bot.get_file(message.audio.file_id if message.audio else message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        file_ext = os.path.splitext(file_info.file_path)[1].lower()
        if file_ext != '.wav':
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ WAV-—Ñ–∞–π–ª—ã")
            
        file_path = os.path.join(TEMP_DIR, "audio.wav")
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
            
        return file_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        raise

def encode_lsb(audio_path, message):
    """–ö–æ–¥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ LSB –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    try:
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∫–∞–∫ 16-–±–∏—Ç–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        audio, sr = sf.read(audio_path, dtype='int16')
        if len(audio.shape) > 1:
            audio = audio[:, 0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å—Ç–µ—Ä–µ–æ

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message += "¬ß"
        binary_msg = ''.join([format(ord(c), '08b') for c in message])
        
        if len(binary_msg) > len(audio):
            raise ValueError(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º: {len(audio)//8} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ LSB
        for i in range(len(binary_msg)):
            audio[i] = (audio[i] & 0xFFFE) | int(binary_msg[i])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = os.path.join(TEMP_DIR, "encoded.wav")
        sf.write(output_path, audio, sr, subtype='PCM_16')
        return output_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

def decode_lsb(audio_path):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ LSB –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    try:
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∫–∞–∫ 16-–±–∏—Ç–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        audio, _ = sf.read(audio_path, dtype='int16')
        if len(audio.shape) > 1:
            audio = audio[:, 0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å—Ç–µ—Ä–µ–æ

        # –ò–∑–≤–ª–µ–∫–∞–µ–º LSB –∫–∞–∂–¥–æ–≥–æ —Å—ç–º–ø–ª–∞
        binary_msg = ''.join([str(sample & 1) for sample in audio])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏—Ç—ã –≤ —Ç–µ–∫—Å—Ç
        message = ""
        for i in range(0, len(binary_msg), 8):
            byte = binary_msg[i:i+8]
            if len(byte) < 8:
                break
            char = chr(int(byte, 2))
            if char == "¬ß":
                break
            message += char
        
        return message if message else "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_encode = types.KeyboardButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
    btn_decode = types.KeyboardButton("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
    markup.add(btn_encode, btn_decode)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è LSB-—Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–∏ –≤ WAV-–∞—É–¥–∏–æ.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
def handle_encode(message):
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å WAV-–∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(message, process_audio_for_encoding)

def process_audio_for_encoding(message):
    try:
        if not (message.audio or message.document):
            raise ValueError("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            
        audio_path = save_audio(message)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(message, lambda m: process_text_for_encoding(m, audio_path))
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

def process_text_for_encoding(message, audio_path):
    try:
        if not message.text:
            raise ValueError("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
        encoded_path = encode_lsb(audio_path, message.text)
        with open(encoded_path, 'rb') as f:
            bot.send_audio(
                message.chat.id,
                f,
                caption="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ!",
                title="encoded_audio"
            )
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@bot.message_handler(func=lambda m: m.text == "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
def handle_decode(message):
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å WAV-–∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(message, process_audio_for_decoding)

def process_audio_for_decoding(message):
    try:
        if not (message.audio or message.document):
            raise ValueError("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            
        audio_path = save_audio(message)
        decoded = decode_lsb(audio_path)
        bot.reply_to(message, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{decoded}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
